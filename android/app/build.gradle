apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

/** React-Native / Expo configuration **/
react {
    entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
    reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
    codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    enableBundleCompression = (findProperty('android.enableBundleCompression') ?: false).toBoolean()
    cliFile          = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand    = "export:embed"

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/** Flags **/
def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

/** Android block **/
android {
    ndkVersion         rootProject.ext.ndkVersion
    buildToolsVersion  rootProject.ext.buildToolsVersion
    compileSdk         rootProject.ext.compileSdkVersion

    namespace 'com.aathish.trackmyleave'
    defaultConfig {
        applicationId  'com.aathish.trackmyleave'
        minSdkVersion  rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode    1
        versionName    "1.0.0"
    }

    signingConfigs {
        debug {
            storeFile     file('debug.keystore')
            storePassword 'android'
            keyAlias      'androiddebugkey'
            keyPassword   'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug   // TODO: replace with release keystore
            shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
            minifyEnabled  enableProguardInReleaseBuilds
            proguardFiles  getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            crunchPngs     (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
        }
    }

    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

/** Apply static packagingOptions from gradle.properties **/
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
    def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",")
    options = options.collect { it.trim() }.findAll { it }
    if (!options.isEmpty()) {
        println "android.packagingOptions.$prop += $options (${options.size()})"
        options.each { android.packagingOptions[prop] += it }
    }
}

/** Dependencies **/
dependencies {
    implementation("com.facebook.react:react-android")

    def isGifEnabled          = (findProperty('expo.gif.enabled')  ?: "") == "true"
    def isWebpEnabled         = (findProperty('expo.webp.enabled') ?: "") == "true"
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true"

    if (isGifEnabled) {
        implementation("com.facebook.fresco:animated-gif:${expoLibs.versions.fresco.get()}")
    }
    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:${expoLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            implementation("com.facebook.fresco:animated-webp:${expoLibs.versions.fresco.get()}")
        }
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

/* ───────────────────────────────────────────────
   Custom tasks MUST be outside the android { } block
   ─────────────────────────────────────────────── */
task renameNotificationSound(type: Copy) {
    from("$projectDir/src/main/res/raw")
    include "notification-sound.wav"
    into("$projectDir/src/main/res/raw")
    rename { fileName -> "notification.wav" }
}

// If you have another raw-resource renaming task, define it here;
// otherwise remove the next dependsOn line.
preBuild.dependsOn(renameNotificationSound)
